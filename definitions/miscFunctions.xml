<functions>

  <!-- Definitions from chapter 8 -->
  <function name="Get_version">
    <arg name="version" type="int*" />
    <arg name="subversion" type="int*" />
  </function>

  <function name="Get_library_version">
    <arg name="version" type="char*" />
    <arg name="resultlen" type="int*" />
  </function>

  <function name="Get_processor_name">
    <arg name="name" type="char*" />
    <arg name="resultlen" type="int*" />
  </function>

  <function name="Alloc_mem">
    <arg name="size" type="MPI_Aint" />
    <arg name="info" type="MPI_Info" />
    <arg name="baseptr" type="void*" />
  </function>

  <function name="Free_mem">
    <arg name="base" type="void*" />
  </function>

  <function name="Comm_create_errhandler">
    <arg name="comm_errhandler_fn" type="MPI_Comm_errhandler_function*" />
    <arg name="errhandler" type="MPI_Errhandler*" />
  </function>

  <function name="Comm_set_errhandler">
    <arg name="comm" type="MPI_Comm" />
    <arg name="errhandler" type="MPI_Errhandler" />
  </function>

  <function name="Comm_get_errhandler">
    <arg name="comm" type="MPI_Comm" />
    <arg name="errhandler" type="MPI_Errhandler*" />
  </function>

  <function name="Win_create_errhandler">
    <arg name="win_errhandler_fn" type="MPI_Win_errhandler_function*" />
    <arg name="errhandler" type="MPI_Errhandler*" />
  </function>

  <function name="Win_set_errhandler">
    <arg name="win" type="MPI_Win" />
    <arg name="errhandler" type="MPI_Errhandler" />
  </function>

  <function name="Win_get_errhandler">
    <arg name="win" type="MPI_Win" />
    <arg name="errhandler" type="MPI_Errhandler*" />
  </function>

  <function name="File_create_errhandler">
    <arg name="file_errhandler_fn" type="MPI_File_errhandler_function*" />
    <arg name="errhandler" type="MPI_Errhandler*" />
  </function>

  <function name="File_set_errhandler">
    <arg name="file" type="MPI_File" />
    <arg name="errhandler" type="MPI_Errhandler" />
  </function>

  <function name="File_get_errhandler">
    <arg name="file" type="MPI_File" />
    <arg name="errhandler" type="MPI_Errhandler*" />
  </function>

  <function name="Errhandler_free">
    <arg name="errhandler" type="MPI_Errhandler*" />
  </function>

  <function name="Error_string">
    <arg name="errorcode" type="int" />
    <arg name="string" type="char*" />
    <arg name="resultlen" type="int*" />
  </function>

  <function name="Error_class">
    <arg name="errorcode" type="int" />
    <arg name="errorclass" type="int*" />
  </function>

  <function name="Add_error_class">
    <arg name="errorclass" type="int*" />
  </function>

  <function name="Add_error_code">
    <arg name="errorclass" type="int" />
    <arg name="errorcode" type="int*" />
  </function>

  <function name="Add_error_string">
    <arg name="errorcode" type="int" />
    <arg name="string" type="const char*" />
  </function>

  <function name="Comm_call_errhandler">
    <arg name="comm" type="MPI_Comm" />
    <arg name="errorcode" type="int" />
  </function>

  <function name="Win_call_errhandler">
    <arg name="win" type="MPI_Win" />
    <arg name="errorcode" type="int" />
  </function>

  <function name="File_call_errhandler">
    <arg name="fh" type="MPI_File" />
    <arg name="errorcode" type="int" />
  </function>

  <function name="Wtime" type="double" >
  </function>

  <function name="Wtick" type="double" >
  </function>

  <function name="Init">
    <arg name="argc" type="int*" />
    <arg name="argv" type="char***" />
  </function>

  <function name="Finalize">
  </function>

  <function name="Initialized">
    <arg name="flag" type="int*" />
  </function>

  <function name="Abort">
    <arg name="comm" type="MPI_Comm" />
    <arg name="errorcode" type="int" />
  </function>

  <function name="Finalized">
    <arg name="flag" type="int*" />
  </function>


  <!-- Definitions from chapter 3 and 5 -->
	<function name="Get_count">
		<arg name="status" const="1" type="MPI_Status*"/>
		<type name="datatype" type="MPI_Datatype"/>
		<arg name="count" type="int*"/>
	</function>

  <function name="Buffer_attach">
    <arg name="buffer" type="void*" />
    <arg name="size" type="int" />
  </function>

  <function name="Buffer_detach">
    <arg name="buffer_addr" type="void*" />
    <arg name="size" type="int*" />
  </function>

  <function name="Probe">
    <arg name="source" type="int" />
    <arg name="tag" type="int" />
    <arg name="comm" type="MPI_Comm" />
    <arg name="status" type="MPI_Status*" />
  </function>

  <function name="Iprobe">
    <arg name="source" type="int" />
    <arg name="tag" type="int" />
    <arg name="comm" type="MPI_Comm" />
    <arg name="flag" type="int*" />
    <arg name="status" type="MPI_Status*" />
  </function>

  <function name="Mprobe">
    <arg name="source" type="int" />
    <arg name="tag" type="int" />
    <arg name="comm" type="MPI_Comm" />
    <arg name="message" type="MPI_Message*" />
    <arg name="status" type="MPI_Status*" />
  </function>

  <function name="Improbe">
    <arg name="source" type="int" />
    <arg name="tag" type="int" />
    <arg name="comm" type="MPI_Comm" />
    <arg name="flag" type="int*" />
    <arg name="message" type="MPI_Message*" />
    <arg name="status" type="MPI_Status*" />
  </function>

  <function name="Cancel">
    <request name="request" type="MPI_Request*" />
  </function>

  <function name="Test_cancelled">
    <arg name="status" type="MPI_Status*" const="1"/>
    <arg name="flag" type="int*" />
  </function>

  <function name="Barrier">
    <arg name="comm" type="MPI_Comm" />
  </function>

  <!-- Definitions from chapter 6 -->
  <function name="Group_size">
    <arg name="group" type="MPI_Group" />
    <arg name="size" type="int*" />
  </function>
  <function name="Group_rank">
    <arg name="group" type="MPI_Group" />
    <arg name="rank" type="int*" />
  </function>
  <function name="Group_translate_ranks">
    <arg name="group1" type="MPI_Group" />
    <arg name="n" type="int" />
    <arg name="ranks1" type="int*" const="1"/>
    <arg name="group2" type="MPI_Group" />
    <arg name="ranks2" type="int*" />
  </function>
  <function name="Group_compare">
    <arg name="group1" type="MPI_Group" />
    <arg name="group2" type="MPI_Group" />
    <arg name="result" type="int*" />
  </function>
  <function name="Comm_group">
    <arg name="comm" type="MPI_Comm" />
    <arg name="group" type="MPI_Group*" />
  </function>
  <function name="Group_union">
    <arg name="group1" type="MPI_Group" />
    <arg name="group2" type="MPI_Group" />
    <arg name="newgroup" type="MPI_Group*" />
  </function>
  <function name="Group_intersection">
    <arg name="group1" type="MPI_Group" />
    <arg name="group2" type="MPI_Group" />
    <arg name="newgroup" type="MPI_Group*" />
  </function>
  <function name="Group_difference">
    <arg name="group1" type="MPI_Group" />
    <arg name="group2" type="MPI_Group" />
    <arg name="newgroup" type="MPI_Group*" />
  </function>
  <function name="Group_incl">
    <arg name="group" type="MPI_Group" />
    <arg name="n" type="int" />
    <arg name="ranks" type="int*" const="1"/>
    <arg name="newgroup" type="MPI_Group*" />
  </function>
  <function name="Group_excl">
    <arg name="group" type="MPI_Group" />
    <arg name="n" type="int" />
    <arg name="ranks" type="int*" const="1"/>
    <arg name="newgroup" type="MPI_Group*" />
  </function>
  <function name="Group_range_incl">
    <arg name="group" type="MPI_Group" />
    <arg name="n" type="int" />
    <arg name="ranges" type="Range*" />
    <arg name="newgroup" type="MPI_Group*" />
  </function>
  <function name="Group_range_excl">
    <arg name="group" type="MPI_Group" />
    <arg name="n" type="int" />
    <arg name="ranges" type="Range*" />
    <arg name="newgroup" type="MPI_Group*" />
  </function>
  <function name="Group_free">
    <arg name="group" type="MPI_Group*" />
  </function>
  <function name="Comm_size">
    <arg name="comm" type="MPI_Comm" />
    <arg name="size" type="int*" />
  </function>
  <function name="Comm_rank">
    <arg name="comm" type="MPI_Comm" />
    <arg name="rank" type="int*" />
  </function>
  <function name="Comm_compare">
    <arg name="comm1" type="MPI_Comm" />
    <arg name="comm2" type="MPI_Comm" />
    <arg name="result" type="int*" />
  </function>
  <function name="Comm_dup">
    <arg name="comm" type="MPI_Comm" />
    <arg name="newcomm" type="MPI_Comm*" />
  </function>
  <function name="Comm_dup_with_info">
    <arg name="comm" type="MPI_Comm" />
    <arg name="info" type="MPI_Info" />
    <arg name="newcomm" type="MPI_Comm*" />
  </function>
  <function name="Comm_idup">
    <arg name="comm" type="MPI_Comm" />
    <arg name="newcomm" type="MPI_Comm*" />
    <request name="request" type="MPI_Request*" />
  </function>
  <function name="Comm_create">
    <arg name="comm" type="MPI_Comm" />
    <arg name="group" type="MPI_Group" />
    <arg name="newcomm" type="MPI_Comm*" />
  </function>
  <function name="Comm_create_group">
    <arg name="comm" type="MPI_Comm" />
    <arg name="group" type="MPI_Group" />
    <arg name="tag" type="int" />
    <arg name="newcomm" type="MPI_Comm*" />
  </function>
  <function name="Comm_split">
    <arg name="comm" type="MPI_Comm" />
    <arg name="color" type="int" />
    <arg name="key" type="int" />
    <arg name="newcomm" type="MPI_Comm*" />
  </function>
  <function name="Comm_split_type">
    <arg name="comm" type="MPI_Comm" />
    <arg name="split_type" type="int" />
    <arg name="key" type="int" />
    <arg name="info" type="MPI_Info" />
    <arg name="newcomm" type="MPI_Comm*" />
  </function>
  <function name="Comm_free">
    <arg name="comm" type="MPI_Comm*" />
  </function>
  <function name="Comm_set_info">
    <arg name="comm" type="MPI_Comm" />
    <arg name="info" type="MPI_Info" />
  </function>
  <function name="Comm_get_info">
    <arg name="comm" type="MPI_Comm" />
    <arg name="info_used" type="MPI_Info*" />
  </function>
  <function name="Comm_test_inter">
    <arg name="comm" type="MPI_Comm" />
    <arg name="flag" type="int*" />
  </function>
  <function name="Comm_remote_size">
    <arg name="comm" type="MPI_Comm" />
    <arg name="size" type="int*" />
  </function>
  <function name="Comm_remote_group">
    <arg name="comm" type="MPI_Comm" />
    <arg name="group" type="MPI_Group*" />
  </function>
  <function name="Intercomm_create">
    <arg name="local_comm" type="MPI_Comm" />
    <arg name="local_leader" type="int" />
    <arg name="peer_comm" type="MPI_Comm" />
    <arg name="remote_leader" type="int" />
    <arg name="tag" type="int" />
    <arg name="newintercomm" type="MPI_Comm*" />
  </function>
  <function name="Intercomm_merge">
    <arg name="intercomm" type="MPI_Comm" />
    <arg name="high" type="int" />
    <arg name="newintracomm" type="MPI_Comm*" />
  </function>
  <function name="Comm_create_keyval">
    <arg name="comm_copy_attr_fn" type="MPI_Comm_copy_attr_function*" />
    <arg name="comm_delete_attr_fn" type="MPI_Comm_delete_attr_function*" />
    <arg name="comm_keyval" type="int*" />
    <arg name="extra_state" type="void*" />
  </function>
  <function name="Comm_free_keyval">
    <arg name="comm_keyval" type="int*" />
  </function>
  <function name="Comm_set_attr">
    <arg name="comm" type="MPI_Comm" />
    <arg name="comm_keyval" type="int" />
    <arg name="attribute_val" type="void*" />
  </function>
  <function name="Comm_get_attr">
    <arg name="comm" type="MPI_Comm" />
    <arg name="comm_keyval" type="int" />
    <arg name="attribute_val" type="void*" />
    <arg name="flag" type="int*" />
  </function>
  <function name="Comm_delete_attr">
    <arg name="comm" type="MPI_Comm" />
    <arg name="comm_keyval" type="int" />
  </function>
  <function name="Win_create_keyval">
    <arg name="win_copy_attr_fn" type="MPI_Win_copy_attr_function*" />
    <arg name="win_delete_attr_fn" type="MPI_Win_delete_attr_function*" />
    <arg name="win_keyval" type="int*" />
    <arg name="extra_state" type="void*" />
  </function>
  <function name="Win_free_keyval">
    <arg name="win_keyval" type="int*" />
  </function>
  <function name="Win_set_attr">
    <arg name="win" type="MPI_Win" />
    <arg name="win_keyval" type="int" />
    <arg name="attribute_val" type="void*" />
  </function>
  <function name="Win_get_attr">
    <arg name="win" type="MPI_Win" />
    <arg name="win_keyval" type="int" />
    <arg name="attribute_val" type="void*" />
    <arg name="flag" type="int*" />
  </function>
  <function name="Win_delete_attr">
    <arg name="win" type="MPI_Win" />
    <arg name="win_keyval" type="int" />
  </function>
  <function name="Type_create_keyval">
    <arg name="type_copy_attr_fn" type="MPI_Type_copy_attr_function*" />
    <arg name="type_delete_attr_fn" type="MPI_Type_delete_attr_function*" />
    <arg name="type_keyval" type="int*" />
    <arg name="extra_state" type="void*" />
  </function>
  <function name="Type_free_keyval">
    <arg name="type_keyval" type="int*" />
  </function>
  <function name="Type_set_attr">
    <type name="datatype" type="MPI_Datatype" />
    <arg name="type_keyval" type="int" />
    <arg name="attribute_val" type="void*" />
  </function>
  <function name="Type_get_attr">
    <type name="datatype" type="MPI_Datatype" />
    <arg name="type_keyval" type="int" />
    <arg name="attribute_val" type="void*" />
    <arg name="flag" type="int*" />
  </function>
  <function name="Type_delete_attr">
    <type name="datatype" type="MPI_Datatype" />
    <arg name="type_keyval" type="int" />
  </function>
  <function name="Comm_set_name">
    <arg name="comm" type="MPI_Comm" />
    <arg name="comm_name" type="char*" const="1"/>
  </function>
  <function name="Comm_get_name">
    <arg name="comm" type="MPI_Comm" />
    <arg name="comm_name" type="char*" />
    <arg name="resultlen" type="int*" />
  </function>
  <function name="Type_set_name">
    <type name="datatype" type="MPI_Datatype" />
    <arg name="type_name" type="char*" const="1"/>
  </function>
  <function name="Type_get_name">
    <type name="datatype" type="MPI_Datatype" />
    <arg name="type_name" type="char*" />
    <arg name="resultlen" type="int*" />
  </function>
  <function name="Win_set_name">
    <arg name="win" type="MPI_Win" />
    <arg name="win_name" type="char*" const="1"/>
  </function>
  <function name="Win_get_name">
    <arg name="win" type="MPI_Win" />
    <arg name="win_name" type="char*" />
    <arg name="resultlen" type="int*" />
  </function>
</functions>
