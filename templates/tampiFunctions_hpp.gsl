.ignorecase = 0
.output "$(switches.arg1)"
namespace medi {
.for functions.function as curFunction
. for curFunction.send
.   send.typeName = "$(send.type:upper)"
. endfor
. for curFunction.recv
.   recv.typeName = "$(recv.type:upper)"
. endfor
.
.-// write templates
template<\
. for curFunction.type
.   comma = last()?? "" ? ","
.   type.tplName = "$(type.name:upper)"
typename $(type.tplName)$(comma) \
. endfor
>
.
TAMPI_$(curFunction.name)(
. for curFunction. as item
.   comma = last()?? "" ? ","
.   constMod = defined(item.const) ?? "const " ? ""
.   if(name(item) <> "type")
.     if(name(item) =  "recv" | name(item) =  "send")
        $(constMod)$(item.typeName)::Type $(item.name)$(comma)
.     else
        $(constMod)$(item.type) $(item.name)$(comma)
.     endif
.   endif
. endfor
  ) {
. curFunction.adType = "$(curFunction->type.tplName)::Tool"
  if(!$(curFunction.adType)::IS_ActiveType) {
    MPI_$(curFunction.name)(\
.   for curFunction. as item
.     comma = last()?? "" ? ","
.     if(name(item) <> "type")
$(item.name)$(comma)\
.     else
$(item.tplName)::MPIType$(comma)\
.     endif
.   endfor
);
  } else {
    $(curFunction.adType)::Handle h = $(curFunction.adType)::startAssembly();
.   for curFunction.send
      $(send.typeName)::ModifiedType* $(send.name)Mod = $(send.typeName)::prepareSendBuffer($(send.name), $(send.count), h);
.   endfor
.   for curFunction.recv
      $(recv.typeName)::ModifiedType* $(recv.name)Mod = $(recv.typeName)::prepareRecvBuffer($(recv.name), $(recv.count), h);
.   endfor

    TAMPI_$(curFunction.name)<\
.   for curFunction.type
.     comma = last()?? "" ? ","
.     type.tplName = "$(type.name:upper)"
$(type.tplName)::ModifiedNested$(comma) \
.   endfor
>(\
.   for curFunction. as item
.     comma = last()?? "" ? ","
.     if(name(item) <> "type")
$(item.name)$(comma)\
.     endif
.   endfor
);
    $(curFunction.adType)::addToolAction(h);

.   for curFunction.send
      $(send.typeName)::handleSendBuffer($(send.name), $(send.name)Mod, $(send.count), h);
.   endfor
.   for curFunction.recv
      $(recv.typeName)::handleRecvBuffer($(recv.name), $(recv.name)Mod, $(recv.count), h);
.   endfor

    $(curFunction.adType)::stopAssembly(h);
  }
}
.endfor
}