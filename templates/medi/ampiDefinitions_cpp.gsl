.ignorecase = 0
.template 0

function modifyTypeName(type)
  return string.replace(my.type, "MPI_|AMPI_")
endfunction

for definitions.operator as curOperator
  curOperator.ampiName = modifyTypeName(curOperator.name)
endfor

for definitions.datatype
  datatype.taType = modifyTypeName(datatype.name)
endfor

.endtemplate
.output "$(switches.arg1)"
#pragma once

#include <mpi.h>

#include "ampiDefinitions.h"

namespace medi {

.for definitions.operator as curOperator
  AMPI_Op $(curOperator.ampiName);
.endfor

.for definitions.datatype
  $(datatype.taType)_Type* $(datatype.taType);
.endfor

  void initializeOperators() {
.   for definitions.operator as curOperator
      $(curOperator.ampiName).init($(curOperator.name));
.   endfor
  }

  void initTypes() {
.   for definitions.datatype
      $(datatype.taType) = new $(datatype.taType)_Type($(datatype.name));
.   endfor
  }

  void finalizeTypes() {
.   for definitions.datatype
     delete $(datatype.taType);
.   endfor
  }
}
