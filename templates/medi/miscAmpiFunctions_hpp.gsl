.ignorecase = 0
.template 0

function modifyTypeName(type)
  return string.replace(my.type, "MPI_|AMPI_")
endfunction

for functions.function as curFunction
  if(!defined(curFunction.mpiName))
   curFunction.mpiName = "MPI_$(curFunction.name)"
  endif

  if(!defined(curFunction.type))
   curFunction.type = "int"
  endif

  # mark all orignal arguments as args
  for curFunction. as item
    item.arg = 1
  endfor
  # build the AMPI names for all arguments
  for curFunction. as item
    item.taType = modifyTypeName(item.type)
  endfor

  # build the definitions for the templates
  curFunction.tplDef = ""
  for curFunction.type
    type.tplName = "$(type.name:upper)"
    curFunction.tplDef += "typename $(type.tplName)"

    comma = last()?? "" ? ", "
    curFunction.tplDef += comma
  endfor
  for curFunction.type
    type.tplName = "$(type.name:upper)"
  endfor

  #build the argument lists and the list for the handles
  curFunction.argDef = ""
  for curFunction. as item where defined(item.arg)
    constMod = defined(item.const) ?? "const " ? ""
    curFunction.argDef +=   constMod # prepend the const modifier
    if(name(item) = "type")
      curFunction.argDef += "$(item.tplName)* $(item.name)"
    else
      curFunction.argDef += "$(item.taType) $(item.name)"
    endif

    comma = last()?? "" ? ", "
    curFunction.argDef += comma
  endfor

  #build the argument list for the call with modified items
  curFunction.argArg = ""
  for curFunction. as item where defined(item.arg)
    if(name(item) = "request")
      curFunction.argArg += "&$(item.name)->request"
    elsif(name(item) = "type")
      curFunction.argArg += "$(item.name)->getModifiedMpiType()"    # get the regular mpi type
    else
      curFunction.argArg += "$(item.name)"
    endif
    curFunction.argArg += last()?? "" ? ", "  # append the seperator if neede
  endfor
endfor

.endtemplate
.output "$(switches.arg1)"
#pragma once

#include <mpi.h>

#include "../../include/medi/medipack.h"

namespace medi {
.for functions.function as curFunction
. if("" <> curFunction.tplDef)
    template<$(curFunction.tplDef)>
. endif
  inline $(curFunction.type) AMPI_$(curFunction.name)($(curFunction.argDef)) {
    return MPI_$(curFunction.name)($(curFunction.argArg));
  }

.endfor
}
