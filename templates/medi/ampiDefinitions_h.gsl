.ignorecase = 0
.template 0

function modifyTypeName(type)
  return string.replace(my.type, "MPI_|AMPI_")
endfunction

for definitions.define as curDefine
  curDefine.ampiName = modifyTypeName(curDefine.name)
endfor

for definitions.typedef as curTypedef
  curTypedef.ampiName = modifyTypeName(curTypedef.name)
endfor

for definitions.operator as curOperator
  curOperator.ampiName = modifyTypeName(curOperator.name)
endfor

for definitions.datatype
  datatype.taType = modifyTypeName(datatype.name)
endfor

.endtemplate
.output "$(switches.arg1)"
#pragma once

#include <mpi.h>

#include "../../include/medi/mpiTypePassive.hpp"

namespace medi {
.for definitions.define as curDefine
  #define $(curDefine.ampiName) $(curDefine.name)
.endfor

.for definitions.typedef as curTypedef
  typedef $(curTypedef.name) $(curTypedef.ampiName);
.endfor

  void initializeOperators();

.for definitions.operator as curOperator
  extern AMPI_Op $(curOperator.ampiName);
.endfor

  void initTypes();
  void finalizeTypes();

.for definitions.datatype
  typedef MpiTypePassive<$(datatype.type)> $(datatype.taType)_Type;
.endfor

.for definitions.datatype
  extern $(datatype.taType)_Type* $(datatype.taType);
.endfor
}
